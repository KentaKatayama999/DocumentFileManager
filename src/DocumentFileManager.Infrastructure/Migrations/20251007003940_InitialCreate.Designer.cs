// <auto-generated />
using System;
using DocumentFileManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentFileManager.Infrastructure.Migrations
{
    [DbContext(typeof(DocumentManagerContext))]
    [Migration("20251007003940_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("DocumentFileManager.Entities.CheckItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("CheckItems");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.CheckItemDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaptureFile")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("CheckItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("CheckItemId", "DocumentId", "LinkedAt")
                        .IsUnique();

                    b.ToTable("CheckItemDocuments");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.HasIndex("RelativePath")
                        .IsUnique();

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.CheckItem", b =>
                {
                    b.HasOne("DocumentFileManager.Entities.CheckItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.CheckItemDocument", b =>
                {
                    b.HasOne("DocumentFileManager.Entities.CheckItem", "CheckItem")
                        .WithMany("LinkedDocuments")
                        .HasForeignKey("CheckItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentFileManager.Entities.Document", "Document")
                        .WithMany("LinkedCheckItems")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckItem");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.CheckItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LinkedDocuments");
                });

            modelBuilder.Entity("DocumentFileManager.Entities.Document", b =>
                {
                    b.Navigation("LinkedCheckItems");
                });
#pragma warning restore 612, 618
        }
    }
}
